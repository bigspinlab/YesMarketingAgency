{"version":3,"sources":["counter.js","scrollTriggerAnimations.js","stopOverScroll.js","textAnimation.js"],"names":["PureCounter","selector","duration","once","scrollTriggerAnimations","gsapFadeAnimation","animationType","initialY","initialX","gsap","utils","toArray","forEach","animatedItem","delayedAnimation","Number","getAttribute","set","autoAlpha","y","x","to","delay","scrollTrigger","trigger","toggleActions","registerPlugin","ScrollTrigger","config","nullTargetWarn","func","dc","delayedCall","pause","handler","restart","window","addEventListener","callAfterResize","stopOverscroll","element","document","body","documentElement","lastTouch","forcing","lastScroll","forward","isRoot","scroller","scrollingElement","ua","navigator","userAgent","getMax","scrollHeight","innerHeight","clientHeight","addListener","type","passive","revert","style","overflowY","handleTouch","e","evt","changedTouches","pageY","scrollTop","preventDefault","handleScroll","setTimeout","match","overscrollBehavior","textAnimations","textContainers","pinnedSection","querySelector","animationTimeline","timeline","pin","scrub","markers","end","offsetHeight","length","text","fromTo","lazy","opacity","yoyo","repeat"],"mappings":"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","file":"app.min.js","sourcesContent":["new PureCounter({\n  selector: \".js-counter\",\n  duration: 3,\n  once: false,\n})\n\nnew PureCounter({\n  selector: \".js-counter-decimal\",\n  duration: 3,\n  once: false,\n})","const scrollTriggerAnimations = () => {\n  gsap.registerPlugin(ScrollTrigger);\n  gsap.config({\n    nullTargetWarn: false,\n  });\n\n  function gsapFadeAnimation(animationType, initialY, initialX) {\n    const animatedContainers = gsap.utils.toArray(`[data-gsap=\"${animationType}\"]`)\n\n    animatedContainers.forEach(\n      (animatedItem) => {\n\n        if (!animatedItem) {\n          return;\n        }\n\n        const delayedAnimation = Number(animatedItem.getAttribute(\"data-gsap-delay\")) / 1000 ?? 0;\n\n        gsap.set(animatedItem, {\n          autoAlpha: 0,\n          y: initialY,\n          x: initialX\n        })\n\n        gsap.to(\n          animatedItem, {\n            duration: 1.5,\n            autoAlpha: 1,\n            y: 0,\n            x: 0,\n            delay: delayedAnimation,\n            scrollTrigger: {\n              trigger: animatedItem,\n              toggleActions: \"play none none none\", // change first to play if is only once\n            }\n          }\n        )\n      }\n    );\n\n  }\n\n  function initAnimations() {\n    gsapFadeAnimation('fade-up', 100, 0);\n    gsapFadeAnimation('fade-in', 0, 0);\n    gsapFadeAnimation('fade-from-left', 0, -100);\n    gsapFadeAnimation('fade-from-right', 0, 100);\n  }\n\n  function callAfterResize(func, delay) {\n    let dc = gsap.delayedCall(delay || 0.2, func).pause(),\n      handler = () => dc.restart(true);\n    window.addEventListener(\"resize\", handler);\n    return handler; // in case you want to window.removeEventListener() later\n  }\n\n  callAfterResize(initAnimations(), 0.3);\n}\n\nscrollTriggerAnimations();","function stopOverscroll(element) {\n  element = gsap.utils.toArray(element)[0] || window;\n  (element === document.body || element === document.documentElement) && (element = window);\n  let lastScroll = 0,\n    lastTouch, forcing,\n    forward = true,\n    isRoot = element === window,\n    scroller = isRoot ? document.scrollingElement : element,\n    ua = window.navigator.userAgent + \"\",\n    getMax = isRoot ? () => scroller.scrollHeight - window.innerHeight : () => scroller.scrollHeight - scroller.clientHeight,\n    addListener = (type, func) => element.addEventListener(type, func, {\n      passive: false\n    }),\n    revert = () => {\n      scroller.style.overflowY = \"auto\";\n      forcing = false;\n    },\n    kill = () => {\n      forcing = true;\n      scroller.style.overflowY = \"hidden\";\n      (!forward && scroller.scrollTop < 1) ? (scroller.scrollTop = 1) : (scroller.scrollTop = getMax() - 1);\n      setTimeout(revert, 1);\n    },\n    handleTouch = e => {\n      let evt = e.changedTouches ? e.changedTouches[0] : e,\n        forward = evt.pageY <= lastTouch;\n      if (((!forward && scroller.scrollTop <= 1) || (forward && scroller.scrollTop >= getMax() - 1)) && e.type === \"touchmove\") {\n        e.preventDefault();\n      } else {\n        lastTouch = evt.pageY;\n      }\n    },\n    handleScroll = e => {\n      if (!forcing) {\n        let scrollTop = scroller.scrollTop;\n        forward = scrollTop > lastScroll;\n        if ((!forward && scrollTop < 1) || (forward && scrollTop >= getMax() - 1)) {\n          e.preventDefault();\n          kill();\n        }\n        lastScroll = scrollTop;\n      }\n    };\n  if (\"ontouchend\" in document && !!ua.match(/Version\\/[\\d\\.]+.*Safari/)) {\n    addListener('scroll', handleScroll);\n    addListener('touchstart', handleTouch);\n    addListener('touchmove', handleTouch);\n  }\n  scroller.style.overscrollBehavior = \"none\";\n}\n\nstopOverscroll();\n","const textAnimations = () => {\n  gsap.registerPlugin(ScrollTrigger);\n\n  const textContainers = gsap.utils.toArray(\".js-gsap-text\");\n  const pinnedSection = document.querySelector(\".js-gsap-pinned\");\n\n  const animationTimeline = gsap.timeline({\n    scrollTrigger: {\n      trigger: pinnedSection,\n      pin: true,\n      scrub: 1,\n      markers: true,\n      end: () => \"+=\" + pinnedSection.offsetHeight * (textContainers.length - 1),\n    },\n  })\n\n  textContainers.forEach((text) => {\n    animationTimeline.fromTo(text, {\n      lazy: false,\n      opacity: 0,\n    }, {\n      opacity: 1,\n      duration: 1,\n      yoyo: true,\n      repeat: 1,\n    })\n  });\n}\n\ntextAnimations();"]}